# Configuración básica de la aplicación
spring.application.name=talentmatch
server.port=8080

# Configuración de la base de datos
spring.datasource.url=jdbc:mysql://localhost:3306/talentmatch?createDatabaseIfNotExist=true
spring.datasource.username=root
spring.datasource.password=1234
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# Configuración de JPA
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect

# Configuración de mensajes de error
server.error.include-message=always
server.error.include-binding-errors=always
server.error.include-stacktrace=on-param
server.error.include-exception=true

# Configuración de logging
logging.level.root=INFO
logging.level.com.talentmatch=DEBUG
logging.level.org.springframework.web=INFO
logging.level.org.springframework.security=INFO
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} %-5level %logger{36} - %msg%n

# Configuración de JWT
jwt.secret=404E635266556A586E3272357538782F413F4428472B4B6250645367566B5970
jwt.expiration=86400000

# Configuración de Firebase
firebase.storage.bucket=taskmanager-81161.appspot.com
firebase.config.path=firebase-config.json

# Configuración de Gemini AI
gemini.api.key=AIzaSyCP_xZmGAsOpIx_BHIRxVn1ppJD5wiORao
gemini.api.url=https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent

# Configuración de correos electrónicos
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=notificaciones@talentmatch.com
spring.mail.password=your_password_here
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

# Configuración de tamaño máximo de archivos
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB

# Configuración de Swagger/OpenAPI
springdoc.api-docs.path=/api-docs
springdoc.swagger-ui.path=/swagger-ui
springdoc.swagger-ui.operationsSorter=method

# URL del frontend (para CORS)
frontend.url=http://localhost:3000

# Configuración OAuth2 para Google
spring.security.oauth2.client.registration.google.client-id=999852287685-j75bpg0cmbgk7fbt60umreqvv46p890t.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret=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
spring.security.oauth2.client.registration.google.scope=openid,profile,email
spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8080/api/oauth2/callback/google

# Configuración OAuth2 para GitHub
spring.security.oauth2.client.registration.github.client-id=Ov23lilKQ7DR9u4dfLpS
spring.security.oauth2.client.registration.github.client-secret=1ed716f7bc870cbc74beb47dc727c2162e0e0a04
spring.security.oauth2.client.registration.github.scope=read:user,user:email
spring.security.oauth2.client.registration.github.client-authentication-method=client_secret_basic
spring.security.oauth2.client.registration.github.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.github.redirect-uri=http://localhost:8080/api/oauth2/callback/github
spring.security.oauth2.client.provider.github.authorization-uri=https://github.com/login/oauth/authorize
spring.security.oauth2.client.provider.github.token-uri=https://github.com/login/oauth/access_token
spring.security.oauth2.client.provider.github.user-info-uri=https://api.github.com/user
spring.security.oauth2.client.provider.github.user-name-attribute=id

